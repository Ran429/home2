generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  // 서버가 DB에 커넥션을 맺을 때 사용하는 URL
  // uses connection pooling
  url = env("POSTGRES_PRISMA_URL")

  // DB 스키마등을 반영할 때 사용하는 URL
  // uses a direct connection
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// 게시판
model Board {
  id          Int      @id @default(autoincrement())
  boardType   String   @map("board_type")
  title       String
  content     String
  images      Json?
  files       Json?
  viewCount   Int      @default(0) @map("view_count")
  isActive    Boolean  @default(true) @map("is_active")
  isImportant Boolean  @default(false) @map("is_important")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([boardType, isActive])
  @@map("td_board")
}

// 사이트 설정
// 현재는 팝업에 대한 값을 관리한다
model Config {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([key, isActive])
  @@map("td_config")
}

// 조직도 관리 - 부서
model Department {
  id        Int      @id @default(autoincrement())
  name      String
  works     String
  sortOrder Int      @default(0) @map("sort_order")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([isActive, sortOrder])
  @@map("td_department")
}

// 조직도 관리 - 구성원
model Employee {
  id             Int      @id @default(autoincrement())
  name           String
  responsibility String
  works          String
  phoneNumber    String   @map("phone_number")
  department     String
  sortOrder      Int      @default(0) @map("sort_order")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@index([isActive, sortOrder])
  @@map("td_employee")
}

// 연관 사이트 (배너) 관리
model AssociateCompany {
  id          Int      @id @default(autoincrement())
  image       Json
  link        String
  description String?
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([isActive, sortOrder])
  @@index([isDeleted])
  @@map("td_associate_company")
}

// 관리자 - 계정
model AdminAccount {
  id                         Int                          @id @default(autoincrement())
  userId                     String                       @unique @map("user_id")
  password                   String
  name                       String
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  maintenanceBoards          AdminMaintenanceBoard[]
  AdminMaintenanceBoardReply AdminMaintenanceBoardReply[]

  @@map("td_admin_account")
}

// 관리자 - 유지보수 게시판
model AdminMaintenanceBoard {
  id            Int                          @id @default(autoincrement())
  title         String
  content       String
  images        Json?
  files         Json?
  isActive      Boolean                      @default(true) @map("is_active")
  createdUser   AdminAccount                 @relation(fields: [createdUserId], references: [id])
  createdUserId Int                          @map("created_user_id")
  createdAt     DateTime                     @default(now()) @map("created_at")
  updatedAt     DateTime                     @updatedAt @map("updated_at")
  replies       AdminMaintenanceBoardReply[]

  @@index([isActive])
  @@map("td_admin_maintenance_board")
}

model AdminMaintenanceBoardReply {
  id            Int                   @id @default(autoincrement())
  board         AdminMaintenanceBoard @relation(fields: [boardId], references: [id])
  boardId       Int                   @map("admin_maintenance_board_id")
  content       String
  isActive      Boolean               @default(true) @map("is_active")
  createdUser   AdminAccount          @relation(fields: [createdUserId], references: [id])
  createdUserId Int                   @map("created_user_id")
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")

  @@index([isActive])
  @@map("td_admin_maintenance_board_reply")
}
